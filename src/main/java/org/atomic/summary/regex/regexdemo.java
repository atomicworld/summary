package org.atomic.summary.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class regexdemo {

    //  0-9	    一位数，只有个位，取值是0~9	                    \d
    // 10-99    两位数，十位取值1-9，个位取值是0~9	                [1-9]\d
    // 100-199	三位数，最高位取值为1，十位取值0-9，个位取值0-9	    1\d{2}
    // 200-249	三位数，最高位取值为2，十位取值0-4，个位取值0-9	    2[0-4]\d
    // 250-255	三位数，最高位取值为2，十位取值5，个位取值0-5	    25[0-5]
    private final String ip_regex = "((25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))\\.){3}" +
                                    "(25[0-5]|2[0-4]\\d|((1\\d{2})|([1-9]?\\d)))";

    //分析邮件名称部分：
    //  1.26个大小写英文字母表示为a-zA-Z
    //  2.数字表示为0-9
    //  3.下划线表示为_
    //  4.中划线表示为-
    //  5.由于名称是由若干个字母、数字、下划线和中划线组成，所以需要用到+表示多次出现
    //邮件名称表达式：  [a-zA-Z0-9_-]+
    //
    //
    //分析域名部分：
    //  一般域名的规律为“[N级域名][三级域名.]二级域名.顶级域名”，比如“qq.com”、“www.qq.com”、
    //  “mp.weixin.qq.com”、“12-34.com.cn”，分析可得域名类似“** .** .** .**”组成。
    //      1. “**”部分可以表示为[a-zA-Z0-9_-]+
    //      2. “.**”部分可以表示为\.[a-zA-Z0-9_-]+
    //      3. 多个“.**”可以表示为(\.[a-zA-Z0-9_-]+)+
    //域名部分表达式：  [a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+

    private final String email_regex = "^[a-zA-Z0-9_-]" +
                                        "@" +
                                        "[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$";

    //  国内手机号码:
    //      13[0-9], 14[5,7, 9], 15[0, 1, 2, 3, 5, 6, 7, 8, 9], 17[0-9], 18[0-9]
    //  移动号段: 134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188
    //       regex： ^1(3[4-9]|4[7]|5[0-27-9]|7[08]|8[2-478])\\d{8}$
    //  联通号段: 130,131,132,145,155,156,170,171,175,176,185,186
    //       regex： ^1(3[0-2]|4[5]|5[56]|7[0156]|8[56])\\d{8}$
    //  电信号段: 133,149,153,170,173,177,180,181,189
    //       regex： ^1(3[3]|4[9]|53|7[037]|8[019])\\d{8}$
    //只判断手机号码正确：
    //       精准：    ^1(3[0-9]|4[57]|5[0-35-9]|7[0135678]|8[0-9])\\d{8}$
    //      非精准     ^1(3|4|5|7|8)[0-9]\\d{8}$
    //
    //国外电话号码：
    //  格式较多，根据自己的需求，定制比较好
    //  1. ^\\+(?:[0-9]-?){6,14}[0-9]$
    //      匹配：“+12-123456789、+123 123456、……”
    //  2. ^\\+[0-9]{1,3}\\.[0-9]{4,14}(?:x.+)?$
    //      匹配：“+123.123456x4444、+12.1234x11、……”
    //

    //密码检验问题
    //  1.密码长度最少8位
    //  2.大写字母，小写字母，数字，特殊符号必须四选三
    //
    //  [a-zA-Z0-9\\W_]{8,} : 可以匹配字母、数字、特殊字符 (_也得包含进来)
    //      \\W : 与任何非单词字符匹配。与"[^A-Za-z0-9_]"等效。
    //  有的特殊字符只能包含这几个“!@#$%^&*”
    //  [a-zA-Z0-9!@#$%^&*_]:
    //如果采用组合的方式进行排除法，“正向否定匹配 (?!...)，组合所有的不可能”
    //  ^(?![a-zA-Z]+$)
    //  (?![A-Z0-9]+$)
    //  (?![A-Z\W_]+$)
    //  (?![a-z0-9]+$)
    //  (?![a-z\W_]+$)
    //  (?![0-9\W_]+$)
    //  [a-zA-Z0-9\W_]{8,}$
    private final static String passwordRegex = "^(?![a-zA-Z]+$)" +
                                         "(?![A-Z0-9]+$)" +
                                         "(?![A-Z!@#$%^&*_]+$)" +
                                         "(?![a-z0-9]+$)" +
                                         "(?![a-z!@#$%^&*_]+$)" +
                                         "(?![0-9!@#$%^&*_]+$)" +
                                         "[a-zA-Z0-9!@#$%^&*_]{8,}$";

    public static void main(String[] args) {

        String test = "asdjAS@as";
        Pattern p = Pattern.compile(passwordRegex);
        Matcher m = p.matcher(test);
        int count = 0;
        while(m.find()) {
            count++;
            System.out.println("Matcher number=" + count);
            System.out.println("start=" + m.start());
            System.out.println("end=" + m.end());
        }
    }


}
