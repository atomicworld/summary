#ngnix

nginx主要为优化性能，是一种反向代理服、负载均衡务器。有报告表明能支持高达 50,000 个并发连接数。
反向代理服务器。

代理就是一个中介，A和B本来可以直接连接，中间插入一个C，那么C就是中介。
  正向代理：帮助内网client 访问外网 server 用的，（Http代理），从内到外。
  特点：客户端非常明确要访问的服务器地址，服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端，正向代理模式屏蔽或者隐藏了真实客户端信息。
  
  反向代理：方向相反，请求从外网 client foward 到内网server，从外到内。
  特点：请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，nginx扮演的就是一个反向代理角色。

  实际项目操作时，正向代理和反向代理很有可能会存在一个应用场景中，正向代理代理客户端的请求去访问目标服务器，
  目标服务器是一个反向单利服务器，反向代理了多台真实的业务处理服务器。
  例如：
      client-1                                                           server-1
      client-2    <-->     正向代理   <-->    反向代理(ngnix)   <-->      server-2
      client-3                                                           server-3

  Tengine是由淘宝网发起的Web服务器项目：  http://tengine.taobao.org/
  它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到
  了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。从2011年12月开始，Tengine成为一个开源项目，Tengine团队在积极
  地开发和维护着它。Tengine团队的核心成员来自于淘宝、搜狗等互联网企业。Tengine是社区合作的成果，我们欢迎大家参与其中，贡献自己的力量。


Apache的发展时期很长，而且是毫无争议的世界第一大服务器。
  优点：稳定、开源、跨平台等等
  缺点：重量级的、不支持高并发
  运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低。


Ngnix的崛起：
  优点：基于事件驱动架构，支持数以百万级别的TCP连接、跨平台、支持热部署
  

转载一篇很好的Ngnix的文章： 
  《Nginx开发从入门到精通》 http://tengine.taobao.org/book/
  里面详细介绍了ngnix的内核等等。


nginx支持的负载均衡调度算法方式如下：
  1. weight轮询（默认）：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，nginx会自动
     将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值（weight），用于调
     整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬
     件配置进行调整的。

  2. ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这
     也在一定程度上解决了集群部署环境下session共享的问题。

  3. fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概
     率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是nginx默认不支持fair算
     法，如果要使用这种调度算法，请安装upstream_fair模块

  4. url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在nginx作为静态服务器的情况下提高
     缓存效率。同样要注意nginx默认不支持这种调度算法，要使用的话需要安装nginx的hash软件包


ngnix配置：
  ngnix三个核心功能是反向代理、负载均衡和静态服务器，这三个不同的功能的使用，都跟nginx的配置密切相关，nginx服务器的配置
  信息主要集中在nginx.conf这个配置文件中：
  
      main                                # 全局配置
      events {                            # nginx工作模式配置
      }

      http {                                # http设置
          ....
          server {                        # 服务器主机配置
              ....
              location {                    # 路由配置
                  ....
              }
              location path {
                  ....
              }
              location otherpath {
                  ....
              }
          }

          server {
              ....
              location {
                  ....
              }
          }
          upstream name {                    # 负载均衡配置
              ....
          }
      }
     
    1. main：用于进行nginx全局信息的配置
    2. events：用于nginx工作模式的配置
    3. http：用于进行http协议信息的一些配置
    4. server：用于进行服务器访问信息的配置
    5. location：用于进行访问路由的配置
    6. upstream：用于进行负载均衡的配置



